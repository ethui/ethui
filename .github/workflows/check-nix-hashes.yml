name: Check Nix Hashes

on:
  pull_request:
    paths:
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'gui/package.json'
      - 'gui/pnpm-lock.yaml'
      - 'nix/package.nix'
  push:
    branches: [main]
    paths:
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'gui/package.json'
      - 'gui/pnpm-lock.yaml'
      - 'nix/package.nix'

jobs:
  check-hashes:
    runs-on: ubuntu-latest
    outputs:
      expected: ${{ steps.get-hash.outputs.expected }}
      specified: ${{ steps.get-hash.outputs.specified }}
      needs_update: ${{ steps.get-hash.outputs.needs_update }}
    steps:
      - uses: actions/checkout@v4
        
      - name: Install Nix
        uses: cachix/install-nix-action@v22
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          
      - name: Enable flakes
        run: |
          echo "experimental-features = nix-command flakes" | sudo tee -a /etc/nix/nix.conf
          sudo systemctl restart nix-daemon.service
          
      - name: Get current hash from package.nix
        id: get-hash
        run: |
          # Try to build and capture hashes from error message if it fails
          nix build .#pnpmDeps 2>&1 | tee build.log
          if [ "${PIPESTATUS[0]}" -ne 0 ]; then
            # Check if there's a hash mismatch error for ethui-pnpm-deps.drv
            if grep -q "hash mismatch.*ethui-pnpm-deps.drv" build.log; then
              # Extract the specified and got hashes from the error message
              # The error format is:
              # hash mismatch in fixed-output derivation '/nix/store/...-ethui-pnpm-deps.drv':
              #   specified: sha256-...
              #   got:       sha256-...
              # Debug: Show the relevant part of the error
              echo "=== Hash mismatch section from build.log ==="
              grep -A2 "hash mismatch.*ethui-pnpm-deps.drv" build.log || echo "No hash mismatch found"
              echo "=== End of section ==="
              
              SPECIFIED_HASH=$(grep -A2 "hash mismatch.*ethui-pnpm-deps.drv" build.log | grep "specified:" | sed 's/.*specified: *//' | tr -d '[:space:]')
              EXPECTED_HASH=$(grep -A2 "hash mismatch.*ethui-pnpm-deps.drv" build.log | grep "got:" | sed 's/.*got: *//' | tr -d '[:space:]')
              
              echo "Specified hash: $SPECIFIED_HASH"
              echo "Expected hash: $EXPECTED_HASH"
              echo "specified=$SPECIFIED_HASH" >> $GITHUB_OUTPUT
              echo "expected=$EXPECTED_HASH" >> $GITHUB_OUTPUT
              
              if [ -n "$SPECIFIED_HASH" ] && [ -n "$EXPECTED_HASH" ] && [ "$SPECIFIED_HASH" != "$EXPECTED_HASH" ]; then
                echo "needs_update=true" >> $GITHUB_OUTPUT
                echo "Hash mismatch detected!"
                echo "::warning::Hash mismatch! Specified: $SPECIFIED_HASH, Expected: $EXPECTED_HASH"
              else
                echo "needs_update=false" >> $GITHUB_OUTPUT
              fi
            else
              # Build failed for another reason
              echo "Build failed but no hash mismatch found for ethui-pnpm-deps.drv"
              cat build.log
              exit 1
            fi
          else
            echo "Build succeeded, hash is correct"
            echo "needs_update=false" >> $GITHUB_OUTPUT
          fi
  
  validate-hash:
    runs-on: ubuntu-latest
    needs: check-hashes
    if: |
      needs.check-hashes.outputs.needs_update == 'true' &&
      (github.event_name == 'push' || 
       (github.event_name == 'pull_request' && github.event.pull_request.user.login != 'dependabot[bot]'))
    steps:
      - name: Fail if hash needs update
        run: |
          echo "::error::Hash mismatch detected! The pnpm dependency hash needs to be updated."
          echo "Specified: ${{ needs.check-hashes.outputs.specified }}"
          echo "Expected: ${{ needs.check-hashes.outputs.expected }}"
          exit 1

  update-hash:
    runs-on: ubuntu-latest
    needs: check-hashes
    if: |
      github.event_name == 'pull_request' && 
      github.event.pull_request.user.login == 'dependabot[bot]' &&
      needs.check-hashes.outputs.needs_update == 'true'
    steps:

      - id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.ETHUI_DEPLOYER_APP_ID }}
          private-key: ${{ secrets.ETHUI_DEPLOYER_PKEY }}

      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ steps.generate-token.outputs.token }}
          
      - name: Update hash in package.nix
        run: |
          EXPECTED_HASH="${{ needs.check-hashes.outputs.expected }}"
          SPECIFIED_HASH="${{ needs.check-hashes.outputs.specified }}"
          
          echo "Debug: Received outputs from check-hashes job:"
          echo "SPECIFIED_HASH='$SPECIFIED_HASH'"
          echo "EXPECTED_HASH='$EXPECTED_HASH'"
          
          if [ -z "$EXPECTED_HASH" ] || [ -z "$SPECIFIED_HASH" ]; then
            echo "Error: One or both hashes are empty!"
            exit 1
          fi
          
          echo "Updating hash from $SPECIFIED_HASH to $EXPECTED_HASH"
          
          # Update the hash in package.nix
          sed -i "s|$SPECIFIED_HASH|$EXPECTED_HASH|" nix/package.nix
          
      - name: Commit updated hash
        run: |
          git config --local user.email "dev@ethui.dev"
          git config --local user.name "ethui-deployer"
          git add nix/package.nix
          git commit -m "chore: update pnpm dependency hash"
          git push
