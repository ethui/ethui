name: release

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

concurrency:
  group: ${{ github.workflow }}-${{ github.sha }}
permissions:
  contents: write

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get-tag.outputs.tag }}
      version: ${{ steps.get-version.outputs.version }}
      release_id: ${{ steps.get-id.outputs.id }}
    steps:
      - uses: actions/checkout@v4

      # get the current draft release
      - id: get-tag
        name: get tag
        run: |
          echo "tag=$(gh api /repos/ethui/ethui/releases |\
            jq -r '.[] | select(.draft == true) | .tag_name')" \
            >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # get the current version (tag without the `v`)
      - id: get-version
        name: get version
        run: |
          version=$(echo ${{ steps.get-tag.outputs.tag }} | sed 's/^v//')
          echo "version=$version" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # get the current release_id
      - id: get-id
        name: get release ID
        run: |
          echo "id=$(gh api /repos/ethui/ethui/releases |\
            jq -r '.[] | select(.draft == true) | .id')" \
            >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # deletes all assets previously uploaded to the current draft release
  # necessary if we have to retry a release build due to a prior failure
  clear-assets:
    needs: [setup]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          for name in $(gh release view ${{needs.setup.outputs.tag}} --json assets | jq -r '.assets[].name'); do
            gh release delete-asset ${{needs.setup.outputs.tag}} $name
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # build app
  # upload to draft release
  app:
    needs: [setup, clear-assets]
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target universal-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          # - platform: 'windows-latest'
          #   args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev build-essential curl wget file libxdo-dev libssl-dev libayatana-appindicator3-dev librsvg2-dev patchelf libsodium-dev

      # - name: install dependencies (windows)
      #   if: matrix.platform == 'windows-latest'
      #   run: |
      #     curl https://download.libsodium.org/libsodium/releases/libsodium-1.0.18-msvc.zip --output libsodium.zip
      #     7z x libsodium.zip
      #     cp libsodium/x64/Release/v142/static/libsodium.lib sodium.lib
      #     ls
      #   shell: bash

      - uses: dtolnay/rust-toolchain@nightly
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "release"

      - run: npm install -g yarn

      - uses: actions/setup-node@v4
        with:
          cache: "yarn"
          node-version: "22"

      - run: yarn install --frozen-lockfile --network-timeout 1000000

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.setup.outputs.release_id }}
          args: ${{ matrix.args }} --features release

  publish:
    needs: [setup, app]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4

      - name: publish release
        run: gh release edit ${{ needs.setup.outputs.tag }} --draft=false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
