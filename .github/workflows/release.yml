name: release

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

concurrency:
  group: ${{ github.workflow }}-${{ github.sha }}
permissions:
  contents: write

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get-tag.outputs.tag }}
      version: ${{ steps.get-version.outputs.version }}
      release_id: ${{ steps.get-id.outputs.id }}
    steps:
      - uses: actions/checkout@v4

      # get the current draft release
      - id: get-tag
        name: get tag
        run: |
          echo "tag=$(gh api /repos/ethui/ethui/releases |\
            jq -r '.[] | select(.draft == true) | .tag_name')" \
            >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # get the current version (tag without the `v`)
      - id: get-version
        name: get version
        run: |
          version=$(echo ${{ steps.get-tag.outputs.tag }} | sed 's/^v//')
          echo "version=$version" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # get the current release_id
      - id: get-id
        name: get release ID
        run: |
          echo "id=$(gh api /repos/ethui/ethui/releases |\
            jq -r '.[] | select(.draft == true) | .id')" \
            >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # updates Cargo.toml with the computed version and refreshes lockfile
  update-version:
    needs: [setup]
    runs-on: ubuntu-latest
    steps:
      - id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.ETHUI_DEPLOYER_APP_ID }}
          private-key: ${{ secrets.ETHUI_DEPLOYER_PKEY }}

      - uses: actions/checkout@v4
        with:
          token: ${{ steps.generate-token.outputs.token }}

      
      - name: Update Cargo.toml version
        run: |
          sed -i 's/^version = ".*"/version = "${{ needs.setup.outputs.version }}"/' Cargo.toml
          
      - uses: dtolnay/rust-toolchain@nightly
      
      - name: Update Cargo.lock
        run: cargo update --workspace
        
      - name: Commit version changes
        run: |
          git config --local user.email "dev@ethui.dev"
          git config --local user.name "ethui-deployer"
          git add Cargo.toml Cargo.lock
          git commit -m "Update version to ${{ needs.setup.outputs.version }}" || exit 0
          git push

  # deletes all assets previously uploaded to the current draft release
  # necessary if we have to retry a release build due to a prior failure
  clear-assets:
    needs: [setup]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          for name in $(gh release view ${{needs.setup.outputs.tag}} --json assets | jq -r '.assets[].name'); do
            gh release delete-asset ${{needs.setup.outputs.tag}} $name
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # build app
  # upload to draft release
  app:
    needs: [setup, update-version, clear-assets]
    environment: release
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target universal-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          # fetch main branch to ensure we have the latest version of Cargo.lock
          # commited in the `update-version` step
          ref: main
          fetch-depth: 0

      - name: linux - install dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev build-essential curl wget file libxdo-dev libssl-dev libayatana-appindicator3-dev librsvg2-dev patchelf libsodium-dev

      - uses: dtolnay/rust-toolchain@nightly
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: macos - install rust
        if: matrix.platform == 'macos-latest'
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: aarch64-apple-darwin,x86_64-apple-darwin

      - name: linux - install rust
        if: matrix.platform != 'macos-latest'
        uses: dtolnay/rust-toolchain@nightly

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "release"

      - uses: pnpm/action-setup@v4
        with:
          version: 10
      - uses: actions/setup-node@v4
        with:
          cache: "pnpm"
          node-version: "24.x"

      - run: pnpm install --frozen-lockfile

      - name: macos - Import Apple developer certificate
        if: matrix.platform == 'macos-latest'
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
        run: |
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          security find-identity -v -p codesigning build.keychain

      - name: macos - Verify Certificate
        if: matrix.platform == 'macos-latest'
        run: |
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application")
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
          echo "Certificate imported."

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          # auto-updater signing
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

          # macOS signing
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ env.CERT_ID }}

          # macOS notarization
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

        with:
          releaseId: ${{ needs.setup.outputs.release_id }}
          args: ${{ matrix.args }}
          includeUpdaterJson: true
          updaterJsonKeepUniversal: true

  publish:
    needs: [setup, app]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: publish release
        run: gh release edit ${{ needs.setup.outputs.tag }} --draft=false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-slack:
    needs: [setup, publish]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Get release info
        id: release-info
        run: |
          release_data=$(gh release view ${{ needs.setup.outputs.tag }} --json url,body)
          release_url=$(echo "$release_data" | jq -r '.url')
          
          echo "url=$release_url" >> $GITHUB_OUTPUT
          
          # Process changelog: parse PR links, user tags, escape for JSON, and truncate
          changelog_escaped=$(echo "$release_data" | \
            jq -r '.body' | \
            sed -E 's/#([0-9]+)/<https:\/\/github.com\/ethui\/ethui\/pull\/\1|#\1>/g' | \
            sed -E 's/@([a-zA-Z0-9_-]+)/<https:\/\/github.com\/\1|@\1>/g' | \
            jq -Rs . | \
            sed 's/^"//;s/"$//')
          
          if [ ${#changelog_escaped} -gt 2000 ]; then
            changelog_escaped="${changelog_escaped:0:2000}..."
          fi
          echo "changelog=$changelog_escaped" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "ðŸš€ ethui ${{ needs.setup.outputs.tag }} Released"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "<${{ steps.release-info.outputs.url }}|*Download*>"
                  }
                },
                { "type": "divider" },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Changelog:*\n\n${{ steps.release-info.outputs.changelog }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_RELEASE_WEBHOOK_URL }}
